#!perl

use Data::Decrement qw(decrement);
use Getopt::Long::Modern;

our $opt_times = 1;
GetOptions('times|n=i');

for my $item (@ARGV) {
    $item = decrement($item) for 1..$opt_times;
    print "$item\n";
}

# ABSTRACT: Decrement variable using Perl's auto-decrement notion

=head1 SYNOPSIS

 % dec-pl 2 10 b


=head1 DESCRIPTION

This very simple script decrements its arguments using Perl module
L<Data::Decrement>, which basically tries to provide the counterpart to Perl's
C<++> (auto-increment) operator. The auto-increment rules, taken from L<perlop>
and copied here for convenience, are the following:

 The auto-increment operator has a little extra builtin magic to it. If you
 increment a variable that is numeric, or that has ever been used in a numeric
 context, you get a normal increment. If, however, the variable has been used in
 only string contexts since it was set, and has a value that is not the empty
 string and matches the pattern "/^[a-zA-Z]*[0-9]*\z/", the increment is done as
 a string, preserving each character within its range, with carry:

     print ++($foo = "99");      # prints "100"
     print ++($foo = "a0");      # prints "a1"
     print ++($foo = "Az");      # prints "Ba"
     print ++($foo = "zz");      # prints "aaa"

 "undef" is always treated as numeric, and in particular is changed to 0 before
 incrementing (so that a post-increment of an undef value will return 0 rather
 than "undef").

 The auto-decrement operator is not magical.


=head1 OPTIONS

=head2 --times=i (-n)

Specify how many times to decrement.


=head1 SEE ALSO

L<Data::Decrement>
